/*
 * CypressTestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.www.controllers;

import com.example.www.ApiHelper;
import com.example.www.Server;
import com.example.www.exceptions.ApiException;
import com.example.www.http.request.HttpMethod;
import com.example.www.models.Item;
import com.example.www.models.MultipleArraysRequest;
import com.example.www.models.Status11Enum;
import com.example.www.models.TokensRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class APIController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public APIController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Creates a new resource in the system.
     * @param  status  Required parameter: The status of the items to filter by.
     * @param  body  Optional parameter: Custom model with additional properties
     * @return    Returns the Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Object createanitem(
            final Status11Enum status,
            final Item body) throws ApiException, IOException {
        return prepareCreateanitemRequest(status, body).execute();
    }

    /**
     * Creates a new resource in the system.
     * @param  status  Required parameter: The status of the items to filter by.
     * @param  body  Optional parameter: Custom model with additional properties
     * @return    Returns the Object response from the API call
     */
    public CompletableFuture<Object> createanitemAsync(
            final Status11Enum status,
            final Item body) {
        try {
            return prepareCreateanitemRequest(status, body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for createanitem.
     */
    private ApiCall<Object, ApiException> prepareCreateanitemRequest(
            final Status11Enum status,
            final Item body) {
        return new ApiCall.Builder<Object, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/items/{status}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("status").value((status != null) ? status.value() : null)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> response)
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad Syntax",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Permission Denied",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * @param  id  Required parameter: The ID of the item to retrieve
     * @param  value  Required parameter: The value of the item to retrieve
     * @return    Returns the Item response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Item getanitembyID(
            final String id,
            final String value) throws ApiException, IOException {
        return prepareGetanitembyIDRequest(id, value).execute();
    }

    /**
     * @param  id  Required parameter: The ID of the item to retrieve
     * @param  value  Required parameter: The value of the item to retrieve
     * @return    Returns the Item response from the API call
     */
    public CompletableFuture<Item> getanitembyIDAsync(
            final String id,
            final String value) {
        try {
            return prepareGetanitembyIDRequest(id, value).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for getanitembyID.
     */
    private ApiCall<Item, ApiException> prepareGetanitembyIDRequest(
            final String id,
            final String value) {
        return new ApiCall.Builder<Item, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/items/{id}")
                        .queryParam(param -> param.key("value")
                                .value(value))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Item.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Generates a new OAuth token with the specified scopes.
     * @param  body  Optional parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createOAuthToken(
            final TokensRequest body) throws ApiException, IOException {
        prepareCreateOAuthTokenRequest(body).execute();
    }

    /**
     * Generates a new OAuth token with the specified scopes.
     * @param  body  Optional parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createOAuthTokenAsync(
            final TokensRequest body) {
        try {
            return prepareCreateOAuthTokenRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for createOAuthToken.
     */
    private ApiCall<Void, ApiException> prepareCreateOAuthTokenRequest(
            final TokensRequest body) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/tokens")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint accepts a complex structure with multiple arrays.
     * @param  body  Optional parameter:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void testEndpointwithArrays(
            final MultipleArraysRequest body) throws ApiException, IOException {
        prepareTestEndpointwithArraysRequest(body).execute();
    }

    /**
     * This endpoint accepts a complex structure with multiple arrays.
     * @param  body  Optional parameter:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> testEndpointwithArraysAsync(
            final MultipleArraysRequest body) {
        try {
            return prepareTestEndpointwithArraysRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for testEndpointwithArrays.
     */
    private ApiCall<Void, ApiException> prepareTestEndpointwithArraysRequest(
            final MultipleArraysRequest body) {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/multiple-arrays")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}