/*
 * CypressTestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.www.http.client;

import io.apimatic.core.configurations.http.client.CoreProxyConfiguration;
import io.apimatic.coreinterfaces.http.proxy.ProxyConfiguration;

/**
* Represents the HTTP proxy configuration used by the SDK.
*/
public class HttpProxyConfiguration implements ReadonlyHttpProxyConfiguration {

    private final CoreProxyConfiguration configuration;

    /**
     * Creates a new {@code HttpProxyConfiguration} instance with the given core proxy
     * configuration.
     * @param configuration the underlying {@link CoreProxyConfiguration} to wrap.
     */
    private HttpProxyConfiguration(final CoreProxyConfiguration configuration) {
        this.configuration = configuration;
    }

    /**
     * Gets the proxy server address.
     * @return the proxy address as a string.
     */
    public String getAddress() {
        return configuration.getAddress();
    }

    /**
     * Gets the proxy server port.
     * @return the proxy port number.
     */
    public int getPort() {
        return configuration.getPort();
    }

    /**
     * Gets the username used for proxy authentication.
     * @return the proxy username, or {@code null} if authentication is not required.
     */
    public String getUsername() {
        return configuration.getUsername();
    }

    /**
     * Gets the password used for proxy authentication.
     * @return the proxy password, or {@code null} if authentication is not required.
     */
    public String getPassword() {
        return configuration.getPassword();
    }

    /**
     * Retrieves the underlying proxy configuration.
     * @return the {@link ProxyConfiguration} instance containing all proxy settings.
     */
    public ProxyConfiguration getConfiguration() {
        return configuration;
    }

    /**
     * Creates a new builder initialized with the current configuration's values.
     * @return a new {@link CoreProxyConfiguration.Builder} instance
     */
    public HttpProxyConfiguration.Builder newBuilder() {
        return new Builder(this.getAddress(), this.getPort())
          .auth(this.getUsername(), this.getPassword());
    }

    /**
     * Returns a string representation of this proxy configuration.
     * @return string representation of this object
     */
    @Override
    public String toString() {
        return "HttpProxyConfiguration [" +
          "address=" + this.getAddress() +
          ", port=" + this.getPort() +
          ", username=" + this.getUsername() +
          ", password=" + this.getPassword() +
          "]";
    }

    /**
     * Builder class for constructing {@link CoreProxyConfiguration} instances.
     */
    public static class Builder {

        private final String address;
        private final int port;
        private String username;
        private String password;

        /**
         * Creates a new {@code Builder} instance with the specified proxy server address and port.
         * @param address the proxy server address.
         * @param port    the proxy server port.
         */
        public Builder(String address, int port) {
            this.address = address;
            this.port = port;
        }

        /**
         * Sets the username and password for proxy auth.
         * @param username the username to set for proxy auth.
         * @param password the password to set for proxy auth.
         * @return the builder instance
         */
        public Builder auth(String username, String password) {
            this.username = username;
            this.password = password;
            return this;
        }

        /**
         * Builds a new {@link HttpProxyConfiguration} instance using the set fields.
         * @return the built {@link HttpProxyConfiguration}
         */
        public HttpProxyConfiguration build() {
            return new HttpProxyConfiguration(
              new CoreProxyConfiguration.Builder(address, port)
                .username(username)
                .password(password)
                .build());
        }
    }
}