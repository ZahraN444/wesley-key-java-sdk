/*
 * CypressTestAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.www.models;

import com.example.www.DateTimeHelper;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * This is a model class for Item type.
 */
public class Item {
    private UUID id;
    private String name;
    private LocalDate date;
    private LocalDateTime dateTime;
    private double decimal;
    private long mLong;
    private boolean bool;
    private CustomEnum customEnum;
    private StatusEnum status;
    private Object jsonObject;
    private Object animal;
    private Map<String, Message> map;

    /**
     * Default constructor.
     */
    public Item() {
    }

    /**
     * Initialization constructor.
     * @param  id  UUID value for id.
     * @param  name  String value for name.
     * @param  date  LocalDate value for date.
     * @param  dateTime  LocalDateTime value for dateTime.
     * @param  decimal  double value for decimal.
     * @param  mLong  long value for mLong.
     * @param  bool  boolean value for bool.
     * @param  customEnum  CustomEnum value for customEnum.
     * @param  jsonObject  Object value for jsonObject.
     * @param  animal  Object value for animal.
     * @param  map  Map of String, value for map.
     * @param  status  StatusEnum value for status.
     */
    public Item(
            UUID id,
            String name,
            LocalDate date,
            LocalDateTime dateTime,
            double decimal,
            long mLong,
            boolean bool,
            CustomEnum customEnum,
            Object jsonObject,
            Object animal,
            Map<String, Message> map,
            StatusEnum status) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.dateTime = dateTime;
        this.decimal = decimal;
        this.mLong = mLong;
        this.bool = bool;
        this.customEnum = customEnum;
        this.status = status;
        this.jsonObject = jsonObject;
        this.animal = animal;
        this.map = map;
    }

    /**
     * Getter for Id.
     * @return Returns the UUID
     */
    @JsonGetter("id")
    public UUID getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for UUID
     */
    @JsonSetter("id")
    public void setId(UUID id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Date.
     * @return Returns the LocalDate
     */
    @JsonGetter("date")
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getDate() {
        return date;
    }

    /**
     * Setter for Date.
     * @param date Value for LocalDate
     */
    @JsonSetter("date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setDate(LocalDate date) {
        this.date = date;
    }

    /**
     * Getter for DateTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("dateTime")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateTime() {
        return dateTime;
    }

    /**
     * Setter for DateTime.
     * @param dateTime Value for LocalDateTime
     */
    @JsonSetter("dateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    /**
     * Getter for Decimal.
     * @return Returns the double
     */
    @JsonGetter("decimal")
    public double getDecimal() {
        return decimal;
    }

    /**
     * Setter for Decimal.
     * @param decimal Value for double
     */
    @JsonSetter("decimal")
    public void setDecimal(double decimal) {
        this.decimal = decimal;
    }

    /**
     * Getter for MLong.
     * @return Returns the long
     */
    @JsonGetter("long")
    public long getMLong() {
        return mLong;
    }

    /**
     * Setter for MLong.
     * @param mLong Value for long
     */
    @JsonSetter("long")
    public void setMLong(long mLong) {
        this.mLong = mLong;
    }

    /**
     * Getter for Bool.
     * @return Returns the boolean
     */
    @JsonGetter("bool")
    public boolean getBool() {
        return bool;
    }

    /**
     * Setter for Bool.
     * @param bool Value for boolean
     */
    @JsonSetter("bool")
    public void setBool(boolean bool) {
        this.bool = bool;
    }

    /**
     * Getter for CustomEnum.
     * @return Returns the CustomEnum
     */
    @JsonGetter("CustomEnum")
    public CustomEnum getCustomEnum() {
        return customEnum;
    }

    /**
     * Setter for CustomEnum.
     * @param customEnum Value for CustomEnum
     */
    @JsonSetter("CustomEnum")
    public void setCustomEnum(CustomEnum customEnum) {
        this.customEnum = customEnum;
    }

    /**
     * Getter for Status.
     * @return Returns the StatusEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StatusEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for StatusEnum
     */
    @JsonSetter("status")
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    /**
     * Getter for JsonObject.
     * A generic JSON object
     * @return Returns the Object
     */
    @JsonGetter("jsonObject")
    public Object getJsonObject() {
        return jsonObject;
    }

    /**
     * Setter for JsonObject.
     * A generic JSON object
     * @param jsonObject Value for Object
     */
    @JsonSetter("jsonObject")
    public void setJsonObject(Object jsonObject) {
        this.jsonObject = jsonObject;
    }

    /**
     * Getter for Animal.
     * @return Returns the Object
     */
    @JsonGetter("Animal")
    public Object getAnimal() {
        return animal;
    }

    /**
     * Setter for Animal.
     * @param animal Value for Object
     */
    @JsonSetter("Animal")
    public void setAnimal(Object animal) {
        this.animal = animal;
    }

    /**
     * Getter for Map.
     * @return Returns the Map of String, Message
     */
    @JsonGetter("Map")
    public Map<String, Message> getMap() {
        return map;
    }

    /**
     * Setter for Map.
     * @param map Value for Map of String, Message
     */
    @JsonSetter("Map")
    public void setMap(Map<String, Message> map) {
        this.map = map;
    }

    /**
     * Converts this Item into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Item [" + "id=" + id + ", name=" + name + ", date=" + date + ", dateTime="
                + dateTime + ", decimal=" + decimal + ", mLong=" + mLong + ", bool=" + bool
                + ", customEnum=" + customEnum + ", jsonObject=" + jsonObject + ", animal=" + animal
                + ", map=" + map + ", status=" + status + "]";
    }

    /**
     * Builds a new {@link Item.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Item.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, name, date, dateTime, decimal, mLong, bool, customEnum,
                jsonObject, animal, map)
                .status(getStatus());
        return builder;
    }

    /**
     * Class to build instances of {@link Item}.
     */
    public static class Builder {
        private UUID id;
        private String name;
        private LocalDate date;
        private LocalDateTime dateTime;
        private double decimal;
        private long mLong;
        private boolean bool;
        private CustomEnum customEnum;
        private Object jsonObject;
        private Object animal;
        private Map<String, Message> map;
        private StatusEnum status;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  UUID value for id.
         * @param  name  String value for name.
         * @param  date  LocalDate value for date.
         * @param  dateTime  LocalDateTime value for dateTime.
         * @param  decimal  double value for decimal.
         * @param  mLong  long value for mLong.
         * @param  bool  boolean value for bool.
         * @param  customEnum  CustomEnum value for customEnum.
         * @param  jsonObject  Object value for jsonObject.
         * @param  animal  Object value for animal.
         * @param  map  Map of String, value for map.
         */
        public Builder(UUID id, String name, LocalDate date, LocalDateTime dateTime, double decimal,
                long mLong, boolean bool, CustomEnum customEnum, Object jsonObject, Object animal,
                Map<String, Message> map) {
            this.id = id;
            this.name = name;
            this.date = date;
            this.dateTime = dateTime;
            this.decimal = decimal;
            this.mLong = mLong;
            this.bool = bool;
            this.customEnum = customEnum;
            this.jsonObject = jsonObject;
            this.animal = animal;
            this.map = map;
        }

        /**
         * Setter for id.
         * @param  id  UUID value for id.
         * @return Builder
         */
        public Builder id(UUID id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for date.
         * @param  date  LocalDate value for date.
         * @return Builder
         */
        public Builder date(LocalDate date) {
            this.date = date;
            return this;
        }

        /**
         * Setter for dateTime.
         * @param  dateTime  LocalDateTime value for dateTime.
         * @return Builder
         */
        public Builder dateTime(LocalDateTime dateTime) {
            this.dateTime = dateTime;
            return this;
        }

        /**
         * Setter for decimal.
         * @param  decimal  double value for decimal.
         * @return Builder
         */
        public Builder decimal(double decimal) {
            this.decimal = decimal;
            return this;
        }

        /**
         * Setter for mLong.
         * @param  mLong  long value for mLong.
         * @return Builder
         */
        public Builder mLong(long mLong) {
            this.mLong = mLong;
            return this;
        }

        /**
         * Setter for bool.
         * @param  bool  boolean value for bool.
         * @return Builder
         */
        public Builder bool(boolean bool) {
            this.bool = bool;
            return this;
        }

        /**
         * Setter for customEnum.
         * @param  customEnum  CustomEnum value for customEnum.
         * @return Builder
         */
        public Builder customEnum(CustomEnum customEnum) {
            this.customEnum = customEnum;
            return this;
        }

        /**
         * Setter for jsonObject.
         * @param  jsonObject  Object value for jsonObject.
         * @return Builder
         */
        public Builder jsonObject(Object jsonObject) {
            this.jsonObject = jsonObject;
            return this;
        }

        /**
         * Setter for animal.
         * @param  animal  Object value for animal.
         * @return Builder
         */
        public Builder animal(Object animal) {
            this.animal = animal;
            return this;
        }

        /**
         * Setter for map.
         * @param  map  Map of String, value for map.
         * @return Builder
         */
        public Builder map(Map<String, Message> map) {
            this.map = map;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  StatusEnum value for status.
         * @return Builder
         */
        public Builder status(StatusEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Builds a new {@link Item} object using the set fields.
         * @return {@link Item}
         */
        public Item build() {
            return new Item(id, name, date, dateTime, decimal, mLong, bool, customEnum, jsonObject,
                    animal, map, status);
        }
    }
}
